#!/usr/bin/env bash

DEST="${DEST:-/usr/bin}"
FLARECTL_REPO="cloudflare/cloudflare-go"
FLARECTL_ARCH="${FLARECTL_ARCH:-armv6}"
FZF_REPO="junegunn/fzf"
FZF_ARCH="${FZF_ARCH:-armv7}"
NETBIRD_REPO="netbirdio/netbird"
NETBIRD_ARCH="${NETBIRD_ARCH:-armv6}"
# TAILSCALE_REPO="tailscale/tailscale"
TAILSCALE_ARCH="${TAILSCALE_ARCH:-arm}"

usage() {
  echo "Usage: $(basename "$0") REPO"
  echo
  echo "Examples:"
  echo "  $(basename "$0") $NETBIRD_REPO"
}

git_latest_version() {
  local gh_repo="$1"
  git ls-remote --tags "https://github.com/${gh_repo}" | \
    sed -rn 's|.*refs/tags/v?([^\^]+)(\^\{\})?|\1|p' | \
    grep -E '^v?[0-9]+' | \
    sort -V | \
    busybox tail -1
}

github_latest_release() {
  local gh_repo="$1"
  curl -fsSL "https://api.github.com/repos/${gh_repo}/releases/latest" | \
    jq -er '.tag_name' | sed 's#^v##'
}

flarectl_version() {
  flarectl --version | awk '{ print $NF }'
}

fzf_version() {
  fzf --version | awk '{ print $1 }'
}

netbird_version() {
  netbird version
}

tailscale_version() {
  tailscale version | head -1
}

flarectl_latest_version() {
  github_latest_release "$FLARECTL_REPO"
}

fzf_latest_version() {
  github_latest_release "$FZF_REPO"
}

netbird_latest_version() {
  git_latest_version "$NETBIRD_REPO"
}

tailscale_latest_href() {
  curl -fsSL 'https://pkgs.tailscale.com/stable/#static' | \
    awk -v arch="$TAILSCALE_ARCH" -F'href="' '
      $0 ~ "href=\"tailscale_.*_" arch "\\.tgz\"" {split($2, a, "\"");
      print a[1]}
    '
}

tailscale_latest_version() {
  # DIRTYFIX the tailscale dudes can't be bothered with minor binary releases
  # More often than not there will not be a static binary for the latest version
  # git_latest_version "$TAILSCALE_REPO"
  tailscale_latest_href | sed -r 's#[^_]+_([^_]+)_.*#\1#'
}

fzf_is_up_to_date() {
  local latest_version=""
  if ! latest_version="$(fzf_latest_version)"
  then
    echo "fzf seems to not be installed at all" >&2
    return 1
  fi
  echo "$latest_version"  # to avoid another request, we "return" the version
  [[ "$(fzf_version)" == "$latest_version" ]]
}

flarectl_is_up_to_date() {
  local latest_version=""
  if ! latest_version="$(flarectl_latest_version)"
  then
    echo "Flarectl seems to not be installed at all" >&2
    return 1
  fi
  echo "$latest_version"  # to avoid another request, we "return" the version
  [[ "$(flarectl_version)" == "$latest_version" ]]
}

netbird_is_up_to_date() {
  local latest_version=""
  if ! latest_version="$(netbird_latest_version)"
  then
    echo "Netbird seems to not be installed at all" >&2
    return 1
  fi
  echo "$latest_version"  # to avoid another request, we "return" the version
  [[ "$(netbird_version)" == "$latest_version" ]]
}

tailscale_is_up_to_date() {
  local latest_version=""
  if ! latest_version="$(tailscale_latest_version)"
  then
    echo "Tailscale seems to not be installed at all" >&2
    return 1
  fi
  echo "$latest_version"  # to avoid another request, we "return" the version
  [[ "$(tailscale_version)" == "$latest_version" ]]
}

fetze_flarectl() {
  local latest_version=""
  if latest_version="$(flarectl_is_up_to_date)"
  then
    echo "flarectl is up-to-date ($latest_version)"
    return 0
  fi

  echo "Updating flarectl to ${latest_version}"

  local dest="${FLARECTL_DEST:-$DEST}"
  mkdir -p "$dest"
  local url="https://github.com/${FLARECTL_REPO}/releases/download/v${latest_version}/flarectl_${latest_version}_linux_${FLARECTL_ARCH}.tar.gz"
  wget -qO- "$url" | tar -xzvf - -C "$dest" flarectl
}

fetze_fzf() {
  local latest_version=""
  if latest_version="$(fzf_is_up_to_date)"
  then
    echo "fzf is up-to-date ($latest_version)"
    return 0
  fi

  echo "Updating fzf to ${latest_version}"

  local dest="${FZF_DEST:-$DEST}"
  mkdir -p "$dest"
  local url="https://github.com/${FZF_REPO}/releases/download/v${latest_version}/fzf-${latest_version}-linux_${FLARECTL_ARCH}.tar.gz"
  wget -qO- "$url" | tar -xzvf - -C "$dest" fzf
}

fetze_netbird() {
  local latest_version=""
  if latest_version="$(netbird_is_up_to_date)"
  then
    echo "netbird is up-to-date ($latest_version)"
    return 0
  fi

  echo "Updating netbird to ${latest_version}"

  local dest="${NETBIRD_DEST:-$DEST}"
  mkdir -p "$dest"
  local url="https://github.com/${NETBIRD_REPO}/releases/download/v${latest_version}/netbird_${latest_version}_linux_${NETBIRD_ARCH}.tar.gz"
  wget -qO- "$url" | tar -xzvf - -C "$dest" netbird
  local rc="$?"

  if ! /etc/init.d/netbird restart
  then
    echo "Failed to restart netbird service (new install?)" >&2
  fi

  return "$rc"
}

fetze_tailscale() {
  local latest_version=""
  if latest_version="$(tailscale_is_up_to_date)"
  then
    echo "tailscale is up-to-date ($latest_version)"
    return 0
  fi

  echo "Updating tailscale to ${latest_version}"

  local tmpdir=""
  tmpdir="$(mktemp -d)"
  if [[ -z "$tmpdir" ]]
  then
    echo "Failed to create temporary directory" >&2
    return 1
  fi
  # shellcheck disable=SC2064
  trap "rm -rf '$tmpdir'" EXIT

  local dest="${TAILSCALE_DEST:-$DEST}"
  mkdir -p "$dest"
  local url="https://pkgs.tailscale.com/stable/tailscale_${latest_version}_${TAILSCALE_ARCH}.tgz"
  wget -qO- "$url" | tar xzvf - -C "${tmpdir}"
  find "${tmpdir}" -type f -perm '+1' -iname 'tailscale*' -exec mv -v '{}' "${TAILSCALE_DEST:-$DEST}" \;
  local rc="$?"

  if ! /etc/init.d/tailscale restart
  then
    echo "Failed to restart tailscale service (new install?)" >&2
  fi

  return "$rc"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  set -eu

  ACTION="${1:-}"

  case "$ACTION" in
    -h|--help|--usage|-?)
      usage
      exit 0
      ;;
    cf|flarectl*)
      fetze_flarectl
      ;;
    fzf)
      fetze_fzf
      ;;
    nb|netbird*)
      fetze_netbird
      ;;
    ts|tailsc*)
      fetze_tailscale
      ;;
    *)
      fetze_flarectl
      fetze_fzf
      fetze_netbird
      fetze_tailscale
      ;;
  esac
fi
