#!/usr/bin/env bash

cd "$(dirname "$(readlink -f "$0")")" || return 9
# shellcheck source=lib/echo.sh
source lib/echo.sh || exit 2

export PATH="/srv/bin:$PATH"

WAN_IPV4="${WAN_IPV4:-wan}"
WAN_IPV6="${WAN_IPV6:-wan6}"
WWAN_IPV4="${WWAN_IPV4:-wwan}"
WWAN_IPV6="${WWAN_IPV6:-wwan6}"
WAN_INTERFACES=("$WAN_IPV4" "$WAN_IPV6" "$WWAN_IPV4" "$WWAN_IPV6" quectel)
WWAN_INTERFACES=("$WWAN_IPV4" "$WWAN_IPV6" quectel)

VPN_SERVICES=(netbird tailscale zerotier)
DNS_SERVICES=(adguardhome dnsmasq unbound)
CORE_SERVICES=(odhcpd "${DNS_SERVICES[@]}")

HASS_HOST="${HASS_HOST:-http://10.5.1.1:8123}"
HASS_VODAFONE_WEBHOOK_URL="${HASS_VODAFONE_WEBHOOK_URL:-${HASS_HOST}/api/webhook/vodafone-restart-d90AfKsBPWKhDTT7E9Sfgj-X}"

usage() {
  echo "Usage: $(basename "$0") ACTION [ARGS]"
  echo
  echo "Global flags:"
  echo "  -4                IPv4 only"
  echo "  -6                IPv6 only"
  echo "  -C, --no-color    Disable colors"
  echo "  -d, --debug       Enable debug output"
  echo "  -f, --force       Force action"
  echo "  -h, --help        Show this help"
  echo "  -n, --no-callback Disable callbacks, just do the deed"
  echo "  -N, --no-warn     Disable warnings"
  echo "  -v, --verbose     Enable verbose output"
  echo "  -y, --yes         Disable confirmation"
  echo "  -k, --dry-run     Dry run"
  echo
  echo "Run 'inet ACTION --help' for details about a specific action."
  echo
  echo "ACTIONS:"
  echo "  curl [-- ARGS]       Check connectivity (generate_204 by default)"
  echo "  dig [-- ARGS]        Check DNS resolution (google.com by default)"
  echo "  enable|disable IFACE Soft-en/disable an interface (similar to --permanent)"
  echo "  exec CMD             Execute a command for every WAN interface"
  echo "  ifup|ifdown          Bring interface(s) up or down"
  echo "  ip                   Show IP addresses"
  echo "  lte [--permanent]    Failover to LTE"
  echo "  ping [-- ARGS]       Connectivity debug (ping)"
  echo "  public-ip            Determine public IP of every WAN interface"
  echo "  reset [--force]      Reset wan connection (to ${WAN_IPV4}/${WAN_IPV6})"
  echo "  status               Show wan connection status"
  echo "  speedtest            Perform a librespeed speedtest for every WAN interface"
  echo "  reboot               Reboot vodafone station, and the OpenWRT router"
  echo "  svc-restart SVC      Restart init.d services"
  echo "              all      *ALL* services: all from below"
  echo "              core     core services: ${CORE_SERVICES[*]}"
  echo "              dns      DNS services: ${DNS_SERVICES[*]}"
  echo "              vpn      VPN services: ${VPN_SERVICES[*]}"
  echo "  upstream-dns         Query upstream DNS server"
  echo "  vodafone [-y]        Restart Vodafone Station"
}

# Print a shared description of interface selection helpers.
usage_interface_selection() {
  cat <<'EOF'
Interface selection:
  -4                   Limit actions to IPv4 interfaces (wan, wwan)
  -6                   Limit actions to IPv6 interfaces (wan6, wwan6)
  -f, --filter REGEX   Only target interfaces whose name matches REGEX
  --iface IFACE        Only operate on the specified interface (repeatable)
  --wan, --vodafone    Prefer wired WAN interfaces (exclude LTE)
  --wan4               Only use the IPv4 WAN interface (wan)
  --wan6               Only use the IPv6 WAN interface (wan6)
  --lte, --wwan        Prefer LTE interfaces (exclude wired WAN)
  --lte4, --wwan4      Only use the IPv4 LTE interface (wwan)
  --lte6, --wwan6      Only use the IPv6 LTE interface (wwan6)
EOF
}

# Print help for the curl action.
usage_curl_action() {
  cat <<'EOF'
Usage: inet curl [INTERFACE FLAGS...] [-- CURL_ARGS]

Description:
  Run an HTTP connectivity check against
  http://www.gstatic.com/generate_204 on each selected interface. Without
  additional arguments the command prints the HTTP status code per interface.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"
  --               Forward the remaining arguments directly to curl

Examples:
  inet curl --wan
  inet curl -- --head https://example.com

EOF
  usage_interface_selection
}

# Print help for the dig action.
usage_dig_action() {
  cat <<'EOF'
Usage: inet dig [INTERFACE FLAGS...] [-- DIG_ARGS]

Description:
  Query DNS on the selected interfaces. By default the command resolves
  google.com. Use "--" to pass custom dig arguments.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"
  --               Forward the remaining arguments directly to dig

Examples:
  inet dig --wan4
  inet dig -- +trace example.com

EOF
  usage_interface_selection
}

# Print help for enabling interfaces.
usage_enable_action() {
  cat <<'EOF'
Usage: inet enable [wan|wan4|wan6|lte|lte4|lte6]

Description:
  Soft enable the specified interface(s). The command toggles the OpenWrt
  configuration flag so the interface comes back after a reboot and calls
  ifup.

Flags:
  (none)

Examples:
  inet enable wan
  inet enable lte4
EOF
}

# Print help for disabling interfaces.
usage_disable_action() {
  cat <<'EOF'
Usage: inet disable [wan|wan4|wan6|lte|lte4|lte6]

Description:
  Soft disable the specified interface(s). This mirrors "inet enable" but marks
  the interface as disabled and brings it down.

Flags:
  (none)

Examples:
  inet disable wan
  inet disable lte6
EOF
}

# Print help for the exec action.
usage_exec_action() {
  cat <<'EOF'
Usage: inet exec [INTERFACE FLAGS...] COMMAND [ARGS...]

Description:
  Execute COMMAND once for every selected interface. The placeholder INTF is
  replaced with the OpenWrt interface name in the environment.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet exec --wan echo INTF

EOF
  usage_interface_selection
}

# Print help for ifup/ifdown.
usage_ifupdown_action() {
  cat <<'EOF'
Usage: inet ifup|ifdown [wan|wan4|wan6|lte|lte4|lte6|all]

Description:
  Bring interfaces up or down. When "all" is provided the command loops
  through every WAN/LTE interface.

Flags:
  (none)

Examples:
  inet ifup wan
  inet ifdown all
EOF
}

# Print help for the ip action.
usage_ip_action() {
  cat <<'EOF'
Usage: inet ip [addr|route] [INTERFACE FLAGS...]

Description:
  Show IP address or routing information for the selected interfaces.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet ip
  inet ip route --iface wan6

EOF
  usage_interface_selection
}

# Print help for the LTE failover action.
usage_lte_action() {
  cat <<'EOF'
Usage: inet lte [--permanent]

Description:
  Fail over from the wired WAN interfaces to LTE. When --permanent is supplied
  the wired WAN interfaces are disabled until re-enabled manually.

Flags:
  --permanent  Keep LTE as the preferred uplink until interfaces are re-enabled

Examples:
  inet lte
  inet lte --permanent
EOF
}

# Print help for the ping action.
usage_ping_action() {
  cat <<'EOF'
Usage: inet ping [INTERFACE FLAGS...] [ping options]

Description:
  Run ICMP reachability tests against 8.8.8.8 (IPv4) and 2001:4860:4860::8888
  (IPv6) on the selected interfaces.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet ping --lte
  inet ping -- --count 5

EOF
  usage_interface_selection
}

# Print help for the public IP action.
usage_public_ip_action() {
  cat <<'EOF'
Usage: inet public-ip [INTERFACE FLAGS...]

Description:
  Print the public IP address detected on each selected interface.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet public-ip
  inet public-ip --lte

EOF
  usage_interface_selection
}

# Print help for resetting WAN.
usage_reset_action() {
  cat <<'EOF'
Usage: inet reset [--force]

Description:
  Reset the wired WAN interfaces. With --force the command brings WAN down
  before reenabling it. LTE is brought online during the reset.

Flags:
  --force  Bring the wired interfaces down before reenabling them

Examples:
  inet reset
  inet reset --force
EOF
}

# Print help for the status action.
usage_status_action() {
  cat <<'EOF'
Usage: inet status [INTERFACE FLAGS...]

Description:
  Print the status of the selected interfaces including signal and connectivity
  checks.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet status
  inet status --wan6

EOF
  usage_interface_selection
}

# Print help for the speedtest action.
usage_speedtest_action() {
  cat <<'EOF'
Usage: inet speedtest [INTERFACE FLAGS...]

Description:
  Run the librespeed client for every selected interface to measure download
  and upload throughput.

Flags:
  INTERFACE FLAGS  Any selectors documented under "Interface selection"

Examples:
  inet speedtest
  inet speedtest --lte

EOF
  usage_interface_selection
}

# Print help for the reboot action.
usage_reboot_action() {
  cat <<'EOF'
Usage: inet reboot

Description:
  Reboot the Vodafone station first and then reboot the OpenWrt router.

Flags:
  (none)

Examples:
  inet reboot
EOF
}

# Print help for the service restart action.
usage_svc_action() {
  cat <<'EOF'
Usage: inet svc-restart (dns|vpn|core|all)

Description:
  Restart init.d services grouped by category. The "all" group restarts
  everything, "core" restarts odhcpd and the configured DNS services, and the
  other groups target DNS or VPN services.

Flags:
  (none)

Examples:
  inet svc-restart dns
  inet svc-restart all
EOF
}

# Print help for the upstream DNS check.
usage_upstream_dns_action() {
  cat <<'EOF'
Usage: inet upstream-dns

Description:
  Query the upstream DNS resolver configured on the router and print its
  response.

Flags:
  (none)

Examples:
  inet upstream-dns
EOF
}

# Print help for Vodafone restarts.
usage_vodafone_action() {
  cat <<'EOF'
Usage: inet vodafone [-y]

Description:
  Restart the Vodafone Station using PoE toggling or a Home Assistant webhook.
  The -y/--yes global flag skips the interactive confirmation prompt.

Flags:
  -y, --yes  Skip the confirmation prompt (also available as a global flag)

Examples:
  inet vodafone
  inet vodafone -y
EOF
}

# Dispatch help for subcommands.
usage_action() {
  case "$1" in
    curl)
      usage_curl_action
      ;;
    dig)
      usage_dig_action
      ;;
    enable)
      usage_enable_action
      ;;
    disable)
      usage_disable_action
      ;;
    exec)
      usage_exec_action
      ;;
    ifup|ifdown)
      usage_ifupdown_action
      ;;
    ip|i)
      usage_ip_action
      ;;
    lte|ltefailover|failover)
      usage_lte_action
      ;;
    ping|d|pi|p|check|debug)
      usage_ping_action
      ;;
    public-ip|pub*)
      usage_public_ip_action
      ;;
    reset|rst)
      usage_reset_action
      ;;
    status|st*|ifstatus)
      usage_status_action
      ;;
    speedtest|speed)
      usage_speedtest_action
      ;;
    reboot)
      usage_reboot_action
      ;;
    svc|svc-restart|restart)
      usage_svc_action
      ;;
    upstream-dns|dhcp-dns)
      usage_upstream_dns_action
      ;;
    vodafone|voda*|vdf*)
      usage_vodafone_action
      ;;
    "")
      usage
      ;;
    *)
      echo "Unknown action: $1"
      return 2
      ;;
  esac
}

ip() {
  if [[ -n "$NOCOLOR" ]]
  then
    command ip "$@"
    return "$?"
  fi

  command ip --color=auto "$@"
}

ifdown() {
  if [[ -n "$DRY_RUN" ]]
  then
    echo_dryrun "ifdown $*"
    return 0
  fi
  echo_info "ifdown $*"
  command ifdown "$@"
}

ifup() {
  if [[ -n "$DRY_RUN" ]]
  then
    echo_dryrun "ifup $*"
    return 0
  fi
  echo_info "ifup $*"
  command ifup "$@"
}

ifup_or_down_multi() {
  local action="$1"  # ifdown/ifup
  case "$action" in
    ifdown|ifup)
      # valid action
      ;;
    *)
      echo_error "Invalid action: $action"
      return 1
      ;;
  esac

  local target_interfaces=()

  if [[ -z "$2" ]]
  then
    echo_error "No target interface(s) specified."
    return 2
  fi

  case "$2" in
    wan|vodafone)
      if [[ -n "$IPV4_ONLY" ]]
      then
        target_interfaces=("$WAN_IPV4")
      elif [[ -n "$IPV6_ONLY" ]]
      then
        target_interfaces=("$WAN_IPV6")
      else
        target_interfaces=("$WAN_IPV4" "$WAN_IPV6")
      fi
      ;;
    wan4)
      if [[ -n "$IPV6_ONLY" ]]
      then
        echo_error "Invalid combination: -6 $2"
        return 1
      fi
      target_interfaces=("$WAN_IPV4")
      ;;
    wan6)
      if [[ -n "$IPV4_ONLY" ]]
      then
        echo_error "Invalid combination: -4 $2"
        return 1
      fi
      target_interfaces=("$WAN_IPV6")
      ;;
    lte|wwan)
      if [[ -n "$IPV4_ONLY" ]]
      then
        target_interfaces=("$WWAN_IPV4")
      elif [[ -n "$IPV6_ONLY" ]]
      then
        target_interfaces=("$WWAN_IPV6")
      else
        target_interfaces=("$WWAN_IPV4" "$WWAN_IPV6")
      fi
      ;;
    lte4|wwan4)
      if [[ -n "$IPV6_ONLY" ]]
      then
        echo_error "Invalid combination: -6 $2"
        return 1
      fi
      target_interfaces=("$WWAN_IPV4")
      ;;
    lte6|wwan6)
      if [[ -n "$IPV4_ONLY" ]]
      then
        echo_error "Invalid combination: -4 $2"
        return 1
      fi
      target_interfaces=("$WWAN_IPV6")
      ;;
    all)
      target_interfaces=("${WAN_INTERFACES[@]}")
      ;;
    *)
      echo_error "Unknown target interface(s): $2"
      return 2
      ;;
  esac

  if [[ -z "${target_interfaces[*]}" ]]
  then
    echo_warning "No interfaces to run $action against."
    return 1
  fi

  local intf
  for intf in "${target_interfaces[@]}"
  do
    "$action" "$intf"
  done
}

ifup_multi() {
  ifup_or_down_multi ifup "$@"
}

ifdown_multi() {
  ifup_or_down_multi ifdown "$@"
}

iface_disable() {
  local intf
  for intf in "$@"
  do
    echo_warning "Permanently disabling interface $intf"
    uci set "network.${intf}.custom_hotplug_no_default_route=1"
  done
  uci commit network
}

iface_enable() {
  local intf
  for intf in "$@"
  do
    echo_info "Re-enabling interface $intf"
    uci delete "network.${intf}.custom_hotplug_no_default_route"
  done
  uci commit network
}

iface_enable_or_disable_multi() {
  local action="$1"  # enable/disable
  case "$action" in
    enable|disable)
      # valid action
      ;;
    *)
      echo_error "Invalid action: $action"
      return 1
      ;;
  esac

  local target_interfaces=()

  if [[ -z "$2" ]]
  then
    echo_error "No target interface(s) specified."
    return 2
  fi

  case "$2" in
    wan|vodafone)
      if [[ -n "$IPV4_ONLY" ]]
      then
        target_interfaces=("$WAN_IPV4")
      elif [[ -n "$IPV6_ONLY" ]]
      then
        target_interfaces=("$WAN_IPV6")
      else
        target_interfaces=("$WAN_IPV4" "$WAN_IPV6")
      fi
      ;;
    wan4)
      if [[ -n "$IPV6_ONLY" ]]
      then
        echo_error "Invalid combination: -6 $2"
        return 1
      fi
      target_interfaces=("$WAN_IPV4")
      ;;
    wan6)
      if [[ -n "$IPV4_ONLY" ]]
      then
        echo_error "Invalid combination: -4 $2"
        return 1
      fi
      target_interfaces=("$WAN_IPV6")
      ;;
    lte|wwan)
      if [[ -n "$IPV4_ONLY" ]]
      then
        target_interfaces=("$WWAN_IPV4")
      elif [[ -n "$IPV6_ONLY" ]]
      then
        target_interfaces=("$WWAN_IPV6")
      else
        target_interfaces=("${WWAN_INTERFACES[@]}")
      fi
      ;;
    lte4|wwan4)
      if [[ -n "$IPV6_ONLY" ]]
      then
        echo_error "Invalid combination: -6 $2"
        return 1
      fi
      target_interfaces=("$WWAN_IPV4")
      ;;
    lte6|wwan6)
      if [[ -n "$IPV4_ONLY" ]]
      then
        echo_error "Invalid combination: -4 $2"
        return 1
      fi
      target_interfaces=("$WWAN_IPV6")
      ;;
    all)
      target_interfaces=("${WAN_INTERFACES[@]}")
      ;;
    *)
      echo_error "Unknown target interface(s): $2"
      return 2
      ;;
  esac

  if [[ -z "${target_interfaces[*]}" ]]
  then
    echo_warning "No interfaces to run $action against."
    return 1
  fi

  "iface_${action}" "${target_interfaces[@]}"
  ifup_multi "${target_interfaces[@]}"
}

iface_enable_multi() {
  iface_enable_or_disable_multi enable "$@"
}

iface_disable_multi() {
  iface_enable_or_disable_multi disable "$@"
}

fix-route6() {
  /srv/bin/ipv6-routes
}

ping() {
  if [[ -n "$VERBOSE" ]]
  then
    echo_debug "ping $*"
  fi
  command ping "$@"
}

svc_restart() {
  local svc
  for svc in "$@"
  do
    if [[ -n "$DRY_RUN" ]]
    then
      echo_dryrun "/etc/init.d/${svc} restart"
    else
      echo_info "Restarting $svc"
      "/etc/init.d/${svc}" restart
    fi
  done
}

dns_svc_restart() {
  echo_info "Restarting VPN services: ${DNS_SERVICES[*]}"
  svc_restart "${DNS_SERVICES[@]}"
}

core_svc_restart() {
  echo_info "Restarting core services: ${CORE_SERVICES[*]}"
  svc_restart "${CORE_SERVICES[@]}"
}

vpn_svc_restart() {
  echo_info "Restarting VPN services: ${VPN_SERVICES[*]}"
  svc_restart "${VPN_SERVICES[@]}"
}

svc_restart_all() {
  core_svc_restart
  dns_svc_restart
  vpn_svc_restart
}

mwan3_is_active() {
  /etc/init.d/mwan3 running 2>/dev/null
}

mwan3_is_patched() {
  grep -q "PATCHED BY PSCHMITT" /usr/sbin/mwan3
}

wan_status() {
  local intf disabled
  for intf in "${WAN_INTERFACES[@]}"
  do
    disabled=$(interface_is_disabled "$intf" && echo true || echo false)

    ifstatus "$intf" | jq -er \
      --arg intf "$intf" \
      --argjson disabled "$disabled" \
      '
        $intf + ": " + (
          (
            if .up
            then
              "\u001b[32mup"
            else
              "\u001b[31mDOWN"
            end
          )
          + "\u001b[0m" +
          (
            if $disabled
            then
              " \u001b[31m(disabled!)"
            else
              ""
            end
          )
        ) + "\u001b[0m"
      '
  done
}

interface() {
  local owrt_intf="$1"
  local l3_intf

  # Below only works if the interface is up
  if l3_intf=$(ifstatus "$owrt_intf" | jq -er '.l3_device // empty') && [[ -n "$l3_intf" ]]
  then
    echo "$l3_intf"
    return 0
  fi

  # fall back to uci config
  l3_intf=$(uci get "network.${owrt_intf}.device" 2>/dev/null)

  # we gotta bail if we get back an interface like
  # /sys/devices/platform/soc/soc:internal-regs/f1058000.usb/usb1/1-1
  case "$l3_intf" in
    /sys/*)
      return 1
      ;;
  esac

  echo "$l3_intf"
}

interface_ipv4() {
  ifstatus "$1" | jq -er '.["ipv4-address"][].address'
}

interface_ipv6() {
  ifstatus "$1" | jq -er '.["ipv6-address"][].address'
}

interface_dns_server() {
  # TODO handle multiple DNS servers
  # TODO handle the case the dns server is actually used (ie not in .inactive?)
  ifstatus "$1" | jq -er '.inactive["dns-server"][0]'
}

interface_ip() {
  local owrt_intf="$1"
  case "$owrt_intf" in
    *6)
      interface_ipv6 "$owrt_intf"
      ;;
    *)
      interface_ipv4 "$owrt_intf"
      ;;
  esac
}

interface_is_up() {
  ifstatus "$1" | jq -er '.up == true' &>/dev/null
}

interface_is_disabled() {
  local intf="$1"

  local val
  val=$(uci get "network.${intf}.custom_hotplug_no_default_route" 2>/dev/null)

  [[ "$val" == "1" ]]
}

wan_reset() {
  if [[ -n "$FORCE" ]]
  then
    ifdown_multi wan
  fi

  iface_enable_multi wan
  # NOTE iface_enable_multi already does ifup
  # ifup_multi wan

  core_svc_restart
}

lte_failover() {
  ifdown_multi wan

  case "$1" in
    --perm*)
      iface_disable_multi wan
      ;;
  esac

  ifup_multi lte

  core_svc_restart
}

vodafone_restart() {
  echo_confirm "Restart the Vodafone Station?" || return 1

  echo_info "Restarting Vodafone Station..." >&2
  if [[ -n "$DRY_RUN" ]]
  then
    echo_dryrun "curl -fsSL -X POST $HASS_VODAFONE_WEBHOOK_URL"
  else
    if ! /usr/local/bin/poe flip vodafone
    then
      echo_error "POE toggle with SNMP failed. Let's try Home Assistant."
      if ! curl -fsSL -X POST "$HASS_VODAFONE_WEBHOOK_URL"
      then
        echo_warning "POE toggle with Home Assistant failed too"
        return 1
      fi
    fi
  fi

  if [[ -n "$NO_CALLBACK" ]]
  then
    return 0
  fi

  ifdown_multi wan

  echo_info "Sleeping 5s"
  if [[ -n "$DRY_RUN" ]]
  then
    echo_dryrun "jk, just pretending to sleep"
  else
    sleep 5
  fi

  ifup_multi wan
  ifup_multi lte
  # fix-route6

  core_svc_restart
}

full_reboot() {
  if ! NO_CALLBACK=1 vodafone_restart "$@"
  then
    echo_error "Vodafone restart failed"
    return 1
  fi

  echo_info "Rebooting OpenWRT router..."
  reboot
}

intf_loop() {
  local rc=0
  local owrt_intf l3_intf
  local -a args=()
  local res

  local cmd_name
  local -a intf_include=()
  local -a intf_exact_include=()
  local -a intf_exclude=()
  local -a args_v4=(-4)
  local -a args_v6=(-6)
  local -a pipe4_cmd=()
  local -a pipe6_cmd=()
  local quiet
  local stream
  local matched

  while [[ -n "$*" ]]
  do
    case "$1" in
      -f|--filter)
        intf_include+=("$2")
        shift 2
        ;;
      --lte|--wwan)
        intf_include+=("wwan")
        shift
        ;;
      --wan|--vodafone)
        intf_exclude+=("wwan")
        shift
        ;;
      --wan6)
        intf_include+=("wan6")
        intf_exclude+=("wwan")
        shift
        ;;
      --wan4)
        intf_include+=("wan")
        intf_exclude+=("6")
        intf_exclude+=("wwan")
        shift
        ;;
      --lte6|--wwan6)
        intf_include+=("wwan6")
        shift
        ;;
      --lte4|--wwan4)
        intf_include+=("wwan")
        intf_exclude+=("6")
        shift
        ;;
      --iface)
        intf_exact_include+=("$2")
        shift 2
        ;;
      -4)
        intf_exclude+=("6")
        shift
        ;;
      -6)
        intf_include+=("6")
        shift
        ;;
      --name)
        cmd_name="$2"
        shift 2
        ;;
      --args4|--arg4)
        args_v4=("$2")
        shift 2
        ;;
      --args6|--arg6)
        args_v6=("$2")
        shift 2
        ;;
      --pipe4)
        pipe4_cmd=("$2")
        shift 2
        ;;
      --pipe6)
        pipe6_cmd=("$2")
        shift 2
        ;;
      --quiet|-q)
        quiet=1
        shift
        ;;
      -s|--stream|--tty)
        stream=1
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  # from global flags
  if [[ -n "$IPV4_ONLY" ]]
  then
    intf_exclude+=("6")
  elif [[ -n "$IPV6_ONLY" ]]
  then
    intf_include+=("6")
  fi

  local -a cmd=("$@")
  local icmd
  local -a pipe_cmd=()
  local filter
  cmd_name="${cmd_name:-${cmd[0]}}"
  local upstream_dns intf_ipv4 intf_ipv6 intf_ip

  for owrt_intf in "${WAN_INTERFACES[@]}"
  do
    echo_debug "Processing OpenWRT interface $owrt_intf"

    if ((${#intf_exact_include[@]} > 0))
    then
      matched=
      for filter in "${intf_exact_include[@]}"
      do
        if [[ "$owrt_intf" == "$filter" ]]
        then
          matched=1
          break
        fi
      done

      if [[ -z "$matched" ]]
      then
        echo_debug "Skipping interface $owrt_intf (not explicitly selected)"
        continue
      fi
    fi

    for filter in "${intf_include[@]}"
    do
      if [[ "$owrt_intf" != *"$filter"* ]]
      then
        echo_debug "Skipping interface $owrt_intf (not included)"
        continue 2 # 2 = continue outer loop
      fi
    done

    for filter in "${intf_exclude[@]}"
    do
      if [[ "$owrt_intf" == *"$filter"* ]]
      then
        echo_debug "Skipping interface $owrt_intf (excluded)"
        continue 2 # 2 = continue outer loop
      fi
    done

    if [[ "$owrt_intf" == *6 ]]
    then
      args=("${args_v6[@]}")
      pipe_cmd=("${pipe6_cmd[@]}")
    else
      args=("${args_v4[@]}")
      pipe_cmd=("${pipe4_cmd[@]}")
    fi

    if ! interface_is_up "$owrt_intf"
    then
      echo_warning "Interface $owrt_intf is down."
      continue
    fi

    if interface_is_disabled "$owrt_intf"
    then
      echo_warning "Interface $owrt_intf is up, but disabled."
      continue
    fi

    if ! l3_intf="$(interface "$owrt_intf")" || [[ -z "$l3_intf" ]]
    then
      echo_warning "Unable to determine L3 interface of $owrt_intf"
      continue
    fi

    icmd="${cmd[0]} ${args[*]} ${cmd[*]:1}"
    # template cmd
    icmd="${icmd//OWRT_INTF/$owrt_intf}"
    icmd="${icmd//L3_INTF/$l3_intf}"

    if [[ "$icmd" == *INTF_IP* ]]
    then
      intf_ip="$(interface_ip "$owrt_intf")"
      if [[ -z "$intf_ip" ]] || [[ "$intf_ip" == "null" ]]
      then
        echo_warning "Templating failed: No IP address for $owrt_intf"
        continue
      fi

      if [[ "$icmd" == *INTF_IPV4* ]]
      then
        intf_ipv4="$(interface_ipv4 "$owrt_intf" | head -n 1)"
        if [[ -z "$intf_ipv4" ]] || [[ "$intf_ipv4" == "null" ]]
        then
          echo_warning "Templating failed: No IPv4 address for $owrt_intf"
          continue
        fi
        icmd="${icmd//INTF_IPV4/${intf_ipv4}}"
      fi

      if [[ "$icmd" == *INTF_IPV6* ]]
      then
        intf_ipv6="$(interface_ipv6 "$owrt_intf" | head -n 1)"
        if [[ -z "$intf_ipv6" ]] || [[ "$intf_ipv6" == "null" ]]
        then
          echo_warning "Templating failed: No IPv6 address for $owrt_intf"
          continue
        fi
        icmd="${icmd//INTF_IPV6/${intf_ipv6}}"
      fi

      # This must be last since INTF_IP matches INTF_IPV4 etc
      icmd="${icmd//INTF_IP/${intf_ip}}"
    fi

    if [[ "$icmd" == *INTF_DNS* ]]
    then
      upstream_dns="$(interface_dns_server "$owrt_intf")"
      if [[ -z "$upstream_dns" ]] || [[ "$upstream_dns" == "null" ]]
      then
        echo_warning "Templating failed: No upstream DNS server for $owrt_intf"
        continue
      fi

      icmd="${icmd//INTF_DNS/$upstream_dns}"
    fi

    # This must be last since INTF matches INTF_IPV4 etc
    icmd="${icmd//INTF/$l3_intf}"

    if [[ -n "${pipe_cmd[*]}" ]]
    then
      icmd+=" | ${pipe_cmd[*]}"
    fi

    if mwan3_is_active
    then
      if ! mwan3_is_patched
      then
        echo_warning "mwan3 is active. RC might be always 0"
      fi
      icmd="mwan3 use $owrt_intf $icmd"
    fi

    if [[ -n "$VERBOSE" ]]
    then
      echo_info "exec $icmd # $owrt_intf"
    fi

    if [[ -n "$DRY_RUN" ]]
    then
      echo_dryrun "$icmd"
    else
      if [[ -n "$stream" ]]
      then
        if eval "$icmd"
        then
          echo_success "${cmd_name} ($owrt_intf)"
        else
          rc=1
          echo_error "${cmd_name} ($owrt_intf)"
        fi
      else
        if res=$(eval "$icmd" 2>&1)
        then
          echo_success "${cmd_name} ($owrt_intf)"
          [[ -z "$quiet" ]] && echo -e "$res"
        else
          rc=1
          echo_error "${cmd_name} ($owrt_intf)"
          [[ -z "$quiet" ]] && echo -e "$res"
        fi
      fi
    fi

  done

  return "$rc"
}

faketty () {
  # FIXME script is not available on OpenWRT
  script -qefc "$(printf "%q " "$@")" /dev/null
}

ip_addr() {
  local pipe_cmd="jq -er --arg fam inet '.[].addr_info[] | select(.family == \$fam).local'"

  intf_loop \
    "$@" \
    --name "ip addr get" \
    --pipe4 "$pipe_cmd" \
    --pipe6 "${pipe_cmd//inet/inet6}" \
    ip -j addr show INTF
}

ip_addr_show() {
  intf_loop "$@" ip --color=always addr show INTF
}

ip_routes() {
  intf_loop "$@" ip --color=always route show dev INTF
}

wan_ping() {
  local args=()
  [[ -z "${VERBOSE}${DEBUG}" ]] && args=(--quiet)

  intf_loop \
    "$@" \
    "${args[@]}" \
    --arg4 "-4 8.8.8.8" \
    --arg6 "-6 2001:4860:4860::8888" \
    ping -c 3 -W 2 -w 3 -I INTF
}

wan_curl() {
  local name="curl to generate_204"
  local cmd=(
    curl -fsSL \
      --interface INTF \
      -w "%{http_code}" \
      http://www.gstatic.com/generate_204
  )

  while [[ -n "$*" ]]
  do
    case "$1" in
      # custom curl command
      # example:
      # inet --verbose curl -- -fsSL -o /dev/null https://google.com
      --)
        shift
        name="custom curl"
        cmd=(curl --interface INTF "$@")
        set -- # clear all args
        break
        ;;
      *)
        break
        ;;
    esac
  done

  intf_loop --name "$name" \
    "$@" \
    "${cmd[@]}"
}

wan_dig() {
  local name="dig google.com"
  local cmd=(
    dig +short google.com
  )

  while [[ -n "$*" ]]
  do
    case "$1" in
      # custom curl command
      # example:
      # inet --verbose dig -- pschmitt.dev
      --)
        shift
        name="custom dig"
        cmd=(dig "$@")
        set -- # clear all args
        break
        ;;
      *)
        break
        ;;
    esac
  done

  intf_loop \
    "$@" \
    --arg4 "-b INTF_IPV4 @1.1.1.1 A" \
    --arg6 "-b INTF_IPV6 @2606:4700:4700::1111 AAAA" \
    "${cmd[@]}"
}

# FIXME ipv6 does not seem to be supported by speedtest-cli
wan_speedtest-cli() {
  local cmd=(speedtest-cli --secure)
  intf_loop \
    "$@" \
    --stream \
    --arg4 "--source INTF_IPV4" \
    --arg6 "--source [INTF_IPV6]" \
    "${cmd[@]}"
}

# FIXME There does not seem to be a native way to force ookla-speedtest to use
# a specific interface. The `--source` flag is not supported.
wan_speedtest-ookla() {
  local cmd=(ookla-speedtest)
  intf_loop \
    "$@" \
    --stream \
    --arg4 "--INTF_IPV4" \
    --arg6 "--source [INTF_IPV6]" \
    "${cmd[@]}"
}

wan_speedtest-go() {
  local cmd=(speedtest-go)
  intf_loop \
    "$@" \
    --stream \
    --arg4 "--source INTF_IPV4" \
    --arg6 "--source INTF_IPV6" \
    "${cmd[@]}"
}

wan_librespeed() {
  local cmd=(librespeed-cli --simple --secure --duration 10)
  intf_loop \
    "$@" \
    --arg4 "-4 --source INTF_IPV4" \
    --arg6 "-6 --source INTF_IPV6" \
    "${cmd[@]}"
}

wan_query_ustream_dns() {
  intf_loop \
    "$@" \
    --arg4 "-b INTF_IPV4 @INTF_DNS A" \
    --arg6 "-b INTF_IPV6 @INTF_DNS AAAA" \
    dig +short google.com +time=2 +tries=1
}

__devel_test() {
  intf_loop "$@" echo INTF "[OWRT_INTF]"
}

main() {
  local action_help

  while [[ -n $* ]]
  do
    case "$1" in
      --help|-h)
        if [[ ${#ARGS[@]} -eq 0 ]]
        then
          usage
          exit 0
        fi

        action_help=1
        shift
        ;;
      --debug|-d)
        set -x
        shift
        ;;
      --force|-f)
        FORCE=1
        NOCONFIRM=1
        shift
        ;;
      --verbose|-v)
        VERBOSE=1
        shift
        ;;
      -N|--no-warn*)
        NO_WARNING=1
        shift
        ;;
      -C|--no-color|--nocolor)
        NOCOLOR=1
        shift
        ;;
      -n|--no-callback*|--nocallback*)
        NO_CALLBACK=1
        shift
        ;;
      -y|--yes|--no-confirm|--noconfirm)
        NOCONFIRM=1
        shift
        ;;
      --dry-run|--dryrun|-k)
        DRY_RUN=1
        shift
        ;;
      -4)
        IPV4_ONLY=1
        shift
        ;;
      -6)
        IPV6_ONLY=1
        shift
        ;;
      *)
        ARGS+=("$1")
        shift
        ;;
    esac
  done

  set -- "${ARGS[@]}"

  if [[ -z "$1" ]]
  then
    usage
    exit 1
  fi

  if [[ -n "$action_help" || "$2" == "--help" || "$2" == "-h" ]]
  then
    usage_action "$1"
    exit "$?"
  fi

  if [[ -n "$DRY_RUN" ]]
  then
    echo_info "Dry run mode is ON. Nothing matters"
  fi

  case "$1" in
    curl)
      shift
      wan_curl "$@"
      ;;
    dig)
      shift
      wan_dig "$@"
      ;;
    disable)
      shift
      iface_disable_multi "$@"
      ;;
    devel*|test*)
      shift
      __devel_test "$@"
      ;;
    dhcp-dns|upstream-dns)
      shift
      wan_query_ustream_dns "$@"
      ;;
    enable)
      shift
      iface_enable_multi "$@"
      ;;
    exec)
      shift
      intf_loop "$@"
      ;;
    ifup)
      shift
      ifup_multi "$@"
      ;;
    ifdown)
      shift
      ifdown_multi "$@"
      ;;
    ip|i)
      shift
      case "$1" in
        r|route*)
          shift
          ip_routes "$@"
          ;;
        a*)
          ip_addr_show "$@"
          ;;
        *)
          ip_addr "$@"
          ;;
      esac
      ;;
    lte*|failover)
      shift
      lte_failover "$@"
      ;;
    ping|d|pi|p|check|debug)
      shift
      wan_ping "$@"
      ;;
    pub*)
      shift
      /srv/bin/wm-ip "$@"
      ;;
    r|route*) # routes
      shift
      ip_routes "$@"
      ;;
    reset|rst)
      shift
      wan_reset "$@"
      ;;
    reboot)
      shift
      full_reboot "$@"
      ;;
    speedtest|speed)
      shift
      # wan_speedtest-cli "$@"
      # wan_speedtest-ookla "$@"
      # wan_speedtest-go "$@"
      wan_librespeed "$@"
      ;;
    st*|ifstatus) # status
      shift
      wan_status "$@"
      ;;
    svc|svc-restart|restart)
      case "$2" in
        dns|resolv*)
          shift
          dns_svc_restart "$@"
          ;;
        vpn*)
          shift
          vpn_svc_restart "$@"
          ;;
        core)
          shift
          core_svc_restart "$@"
          ;;
        all)
          shift
          svc_restart_all "$@"
          ;;
        *)
          echo "Unknown service: $2" >&2
          exit 2
          ;;
      esac
      ;;
    up)
      shift
      local target=(all)
      [[ -n $* ]] && target=("$@")
      ifup_multi "${target[@]}"
      ;;
    voda*|vdf*)
      shift
      vodafone_restart "$@"
      ;;
    *)
      echo "Unknown action: $1"
      exit 2
      ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  main "$@"
fi
